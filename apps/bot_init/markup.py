"""–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
from telebot import types


class InlineKeyboard:
    """–ö–ª–∞—Å—Å —Å–æ–∑–¥–∞—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, buttons):
        """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞.

        –£—Ä–æ–≤–Ω–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:
        1. –í—Å–µ –∫–Ω–æ–ø–∫–∏
        2. –°—Ç—Ä–æ–∫–∏
        3. –ö–Ω–æ–ø–∫–∏ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è

        Args:
            buttons: ...

            example = tuple(
                tuple(tuple('button1', 'value1'), tuple('button2', 'value2')),
                tuple(tuple('button3', 'value3'),)

            )
        """
        self.keyboard = types.InlineKeyboardMarkup()
        lines = self.get_lines(buttons)
        for line in lines:
            self.keyboard.add(*line)

    def get_lines(self, buttons):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫.

        Args:
            buttons: ...

        Yields:
            buttons_line: ...
        """
        for line in buttons:
            buttons_line = []
            for button_text in line:
                button = self.get_buttons(button_text)
                buttons_line.append(button)
            yield buttons_line

    def get_buttons(self, button_text):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.

        Args:
            button_text: ...

        Returns:
            return: ...
        """
        if isinstance(button_text, str):
            button = types.InlineKeyboardButton(text=button_text, callback_data=button_text)
        if isinstance(button_text, tuple):
            button = types.InlineKeyboardButton(text=button_text[0], callback_data=button_text[1])
        return button


class Keyboard:
    """–ö–ª–∞—Å—Å —Å–æ–∑–¥–∞—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, buttons):
        """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞.

        example = (
            ('button1', 'button2'),
            ('button3',)

        )

        Args:
            buttons: ...
        """
        self.keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        lines = self.get_lines(buttons)
        for line in lines:
            self.keyboard.add(*line)

    def get_lines(self, buttons):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫.

        Args:
            buttons: ...

        Yields:
            buttons_line: ...
        """
        for line in buttons:
            buttons_line = []
            for button_text in line:
                button = self.get_buttons(button_text)
                buttons_line.append(button)
            yield buttons_line

    def get_buttons(self, button_text):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.

        Args:
            button_text: ...

        Returns:
            return: ...
        """
        return types.KeyboardButton(button_text)


def get_default_keyboard(additional_buttons=None):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.

    Args:
        additional_buttons: ...

    Returns:
        return: ...
    """
    if additional_buttons is None:
        additional_buttons = []
    buttons = [
        ('üéß –ü–æ–¥–∫–∞—Å—Ç—ã',),
        ('üïã –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞',),
        ('üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'üîç –ù–∞–π—Ç–∏ –∞—è—Ç'),
    ] + additional_buttons
    return Keyboard(buttons).keyboard
